
Tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002040  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080021c8  080021c8  000121c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021e8  080021e8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080021e8  080021e8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021e8  080021e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021e8  080021e8  000121e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021ec  080021ec  000121ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080021f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000054f5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000105c  00000000  00000000  00025529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005e0  00000000  00000000  00026588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000548  00000000  00000000  00026b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4ab  00000000  00000000  000270b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004a22  00000000  00000000  0004255b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009880f  00000000  00000000  00046f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000df78c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001778  00000000  00000000  000df7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021b0 	.word	0x080021b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080021b0 	.word	0x080021b0

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40023800 	.word	0x40023800

0800030c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	3302      	adds	r3, #2
 800031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	0c1b      	lsrs	r3, r3, #16
 8000326:	43db      	mvns	r3, r3
 8000328:	ea02 0103 	and.w	r1, r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	fa93 f3a3 	rbit	r3, r3
 8000338:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	fab3 f383 	clz	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	fa03 f202 	lsl.w	r2, r3, r2
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	430a      	orrs	r2, r1
 8000352:	3302      	adds	r3, #2
 8000354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40013800 	.word	0x40013800

08000368 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	fa93 f3a3 	rbit	r3, r3
 8000382:	613b      	str	r3, [r7, #16]
  return result;
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	fab3 f383 	clz	r3, r3
 800038a:	b2db      	uxtb	r3, r3
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	2103      	movs	r1, #3
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	43db      	mvns	r3, r3
 8000396:	401a      	ands	r2, r3
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	fa93 f3a3 	rbit	r3, r3
 80003a2:	61bb      	str	r3, [r7, #24]
  return result;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	fab3 f383 	clz	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	6879      	ldr	r1, [r7, #4]
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	431a      	orrs	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	601a      	str	r2, [r3, #0]
}
 80003ba:	bf00      	nop
 80003bc:	3724      	adds	r7, #36	; 0x24
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b089      	sub	sp, #36	; 0x24
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	fa93 f3a3 	rbit	r3, r3
 80003e0:	613b      	str	r3, [r7, #16]
  return result;
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	fab3 f383 	clz	r3, r3
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	401a      	ands	r2, r3
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	fa93 f3a3 	rbit	r3, r3
 8000400:	61bb      	str	r3, [r7, #24]
  return result;
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	fab3 f383 	clz	r3, r3
 8000408:	b2db      	uxtb	r3, r3
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	6879      	ldr	r1, [r7, #4]
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	431a      	orrs	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	60da      	str	r2, [r3, #12]
}
 8000418:	bf00      	nop
 800041a:	3724      	adds	r7, #36	; 0x24
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	683a      	ldr	r2, [r7, #0]
 8000432:	619a      	str	r2, [r3, #24]
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	041a      	lsls	r2, r3, #16
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	619a      	str	r2, [r3, #24]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
	...

08000460 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000466:	f107 0318 	add.w	r3, r7, #24
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000470:	463b      	mov	r3, r7
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]
 800047e:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8000480:	2010      	movs	r0, #16
 8000482:	f7ff ff2b 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000486:	2004      	movs	r0, #4
 8000488:	f7ff ff28 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800048c:	2080      	movs	r0, #128	; 0x80
 800048e:	f7ff ff25 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000492:	2001      	movs	r0, #1
 8000494:	f7ff ff22 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000498:	2002      	movs	r0, #2
 800049a:	f7ff ff1f 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800049e:	2008      	movs	r0, #8
 80004a0:	f7ff ff1c 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, CS_I2C_SPI_Pin|LL_GPIO_PIN_9);
 80004a4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80004a8:	488c      	ldr	r0, [pc, #560]	; (80006dc <MX_GPIO_Init+0x27c>)
 80004aa:	f7ff ffc9 	bl	8000440 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1|LL_GPIO_PIN_2);
 80004ae:	2106      	movs	r1, #6
 80004b0:	488b      	ldr	r0, [pc, #556]	; (80006e0 <MX_GPIO_Init+0x280>)
 80004b2:	f7ff ffc5 	bl	8000440 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80004b6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80004ba:	488a      	ldr	r0, [pc, #552]	; (80006e4 <MX_GPIO_Init+0x284>)
 80004bc:	f7ff ffc0 	bl	8000440 <LL_GPIO_ResetOutputPin>
                          |Audio_RST_Pin);

  /**/
  LL_GPIO_SetOutputPin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin);
 80004c0:	2101      	movs	r1, #1
 80004c2:	4887      	ldr	r0, [pc, #540]	; (80006e0 <MX_GPIO_Init+0x280>)
 80004c4:	f7ff ffae 	bl	8000424 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80004c8:	2308      	movs	r3, #8
 80004ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004cc:	2301      	movs	r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80004dc:	463b      	mov	r3, r7
 80004de:	4619      	mov	r1, r3
 80004e0:	487e      	ldr	r0, [pc, #504]	; (80006dc <MX_GPIO_Init+0x27c>)
 80004e2:	f001 fa75 	bl	80019d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80004e6:	2301      	movs	r3, #1
 80004e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004ea:	2301      	movs	r3, #1
 80004ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004f6:	2300      	movs	r3, #0
 80004f8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80004fa:	463b      	mov	r3, r7
 80004fc:	4619      	mov	r1, r3
 80004fe:	4878      	ldr	r0, [pc, #480]	; (80006e0 <MX_GPIO_Init+0x280>)
 8000500:	f001 fa66 	bl	80019d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000504:	2302      	movs	r3, #2
 8000506:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000508:	2301      	movs	r3, #1
 800050a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 800050c:	2301      	movs	r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000514:	2300      	movs	r3, #0
 8000516:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000518:	463b      	mov	r3, r7
 800051a:	4619      	mov	r1, r3
 800051c:	4870      	ldr	r0, [pc, #448]	; (80006e0 <MX_GPIO_Init+0x280>)
 800051e:	f001 fa57 	bl	80019d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000522:	2304      	movs	r3, #4
 8000524:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000526:	2301      	movs	r3, #1
 8000528:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000532:	2302      	movs	r3, #2
 8000534:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000536:	463b      	mov	r3, r7
 8000538:	4619      	mov	r1, r3
 800053a:	4869      	ldr	r0, [pc, #420]	; (80006e0 <MX_GPIO_Init+0x280>)
 800053c:	f001 fa48 	bl	80019d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000540:	2304      	movs	r3, #4
 8000542:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800054c:	463b      	mov	r3, r7
 800054e:	4619      	mov	r1, r3
 8000550:	4865      	ldr	r0, [pc, #404]	; (80006e8 <MX_GPIO_Init+0x288>)
 8000552:	f001 fa3d 	bl	80019d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800055a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800055c:	2301      	movs	r3, #1
 800055e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000568:	2302      	movs	r3, #2
 800056a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800056c:	463b      	mov	r3, r7
 800056e:	4619      	mov	r1, r3
 8000570:	485a      	ldr	r0, [pc, #360]	; (80006dc <MX_GPIO_Init+0x27c>)
 8000572:	f001 fa2d 	bl	80019d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000576:	f24f 0310 	movw	r3, #61456	; 0xf010
 800057a:	603b      	str	r3, [r7, #0]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800057c:	2301      	movs	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800058c:	463b      	mov	r3, r7
 800058e:	4619      	mov	r1, r3
 8000590:	4854      	ldr	r0, [pc, #336]	; (80006e4 <MX_GPIO_Init+0x284>)
 8000592:	f001 fa1d 	bl	80019d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000596:	2320      	movs	r3, #32
 8000598:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80005a2:	463b      	mov	r3, r7
 80005a4:	4619      	mov	r1, r3
 80005a6:	484f      	ldr	r0, [pc, #316]	; (80006e4 <MX_GPIO_Init+0x284>)
 80005a8:	f001 fa12 	bl	80019d0 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 80005ac:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff feab 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE9);
 80005b6:	494d      	ldr	r1, [pc, #308]	; (80006ec <MX_GPIO_Init+0x28c>)
 80005b8:	2002      	movs	r0, #2
 80005ba:	f7ff fea7 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE15);
 80005be:	494c      	ldr	r1, [pc, #304]	; (80006f0 <MX_GPIO_Init+0x290>)
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff fea3 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 80005c6:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80005ca:	2004      	movs	r0, #4
 80005cc:	f7ff fe9e 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 80005d8:	2301      	movs	r3, #1
 80005da:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80005dc:	2301      	movs	r3, #1
 80005de:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80005e0:	f107 0318 	add.w	r3, r7, #24
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 f86d 	bl	80016c4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 80005ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80005f4:	2300      	movs	r3, #0
 80005f6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80005f8:	2302      	movs	r3, #2
 80005fa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f85f 	bl	80016c4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800060a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800060c:	2301      	movs	r3, #1
 800060e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000610:	2300      	movs	r3, #0
 8000612:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000614:	2302      	movs	r3, #2
 8000616:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000618:	f107 0318 	add.w	r3, r7, #24
 800061c:	4618      	mov	r0, r3
 800061e:	f001 f851 	bl	80016c4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000626:	2301      	movs	r3, #1
 8000628:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 800062a:	2301      	movs	r3, #1
 800062c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800062e:	2301      	movs	r3, #1
 8000630:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4618      	mov	r0, r3
 8000638:	f001 f844 	bl	80016c4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800063c:	2200      	movs	r2, #0
 800063e:	2101      	movs	r1, #1
 8000640:	482c      	ldr	r0, [pc, #176]	; (80006f4 <MX_GPIO_Init+0x294>)
 8000642:	f7ff fec0 	bl	80003c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_9, LL_GPIO_PULL_UP);
 8000646:	2201      	movs	r2, #1
 8000648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064c:	4824      	ldr	r0, [pc, #144]	; (80006e0 <MX_GPIO_Init+0x280>)
 800064e:	f7ff feba 	bl	80003c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_15, LL_GPIO_PULL_UP);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000658:	4826      	ldr	r0, [pc, #152]	; (80006f4 <MX_GPIO_Init+0x294>)
 800065a:	f7ff feb4 	bl	80003c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_PULL_NO);
 800065e:	2200      	movs	r2, #0
 8000660:	2102      	movs	r1, #2
 8000662:	481e      	ldr	r0, [pc, #120]	; (80006dc <MX_GPIO_Init+0x27c>)
 8000664:	f7ff feaf 	bl	80003c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000668:	2200      	movs	r2, #0
 800066a:	2101      	movs	r1, #1
 800066c:	4821      	ldr	r0, [pc, #132]	; (80006f4 <MX_GPIO_Init+0x294>)
 800066e:	f7ff fe7b 	bl	8000368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_9, LL_GPIO_MODE_INPUT);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	4819      	ldr	r0, [pc, #100]	; (80006e0 <MX_GPIO_Init+0x280>)
 800067a:	f7ff fe75 	bl	8000368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_15, LL_GPIO_MODE_INPUT);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000684:	481b      	ldr	r0, [pc, #108]	; (80006f4 <MX_GPIO_Init+0x294>)
 8000686:	f7ff fe6f 	bl	8000368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_MODE_INPUT);
 800068a:	2200      	movs	r2, #0
 800068c:	2102      	movs	r1, #2
 800068e:	4813      	ldr	r0, [pc, #76]	; (80006dc <MX_GPIO_Init+0x27c>)
 8000690:	f7ff fe6a 	bl	8000368 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000694:	f7ff fd98 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 8000698:	4603      	mov	r3, r0
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fde8 	bl	8000274 <NVIC_EncodePriority>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4619      	mov	r1, r3
 80006a8:	2017      	movs	r0, #23
 80006aa:	f7ff fdb9 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006ae:	2017      	movs	r0, #23
 80006b0:	f7ff fd98 	bl	80001e4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80006b4:	f7ff fd88 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fdd8 	bl	8000274 <NVIC_EncodePriority>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4619      	mov	r1, r3
 80006c8:	2028      	movs	r0, #40	; 0x28
 80006ca:	f7ff fda9 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ce:	2028      	movs	r0, #40	; 0x28
 80006d0:	f7ff fd88 	bl	80001e4 <__NVIC_EnableIRQ>

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40020800 	.word	0x40020800
 80006e4:	40020c00 	.word	0x40020c00
 80006e8:	40020400 	.word	0x40020400
 80006ec:	00f00002 	.word	0x00f00002
 80006f0:	f0000003 	.word	0xf0000003
 80006f4:	40020000 	.word	0x40020000

080006f8 <__NVIC_SetPriorityGrouping>:
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072a:	4a04      	ldr	r2, [pc, #16]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	60d3      	str	r3, [r2, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <LL_RCC_HSE_Enable+0x1c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <LL_RCC_HSE_Enable+0x1c>)
 800074a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <LL_RCC_HSE_IsReady+0x24>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800076c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000770:	bf0c      	ite	eq
 8000772:	2301      	moveq	r3, #1
 8000774:	2300      	movne	r3, #0
 8000776:	b2db      	uxtb	r3, r3
}
 8000778:	4618      	mov	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <LL_RCC_SetSysClkSource+0x24>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	f023 0203 	bic.w	r2, r3, #3
 8000798:	4904      	ldr	r1, [pc, #16]	; (80007ac <LL_RCC_SetSysClkSource+0x24>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4313      	orrs	r3, r2
 800079e:	608b      	str	r3, [r1, #8]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	40023800 	.word	0x40023800

080007b0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <LL_RCC_GetSysClkSource+0x18>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f003 030c 	and.w	r3, r3, #12
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <LL_RCC_SetAHBPrescaler+0x24>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007dc:	4904      	ldr	r1, [pc, #16]	; (80007f0 <LL_RCC_SetAHBPrescaler+0x24>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	608b      	str	r3, [r1, #8]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40023800 	.word	0x40023800

080007f4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000804:	4904      	ldr	r1, [pc, #16]	; (8000818 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4313      	orrs	r3, r2
 800080a:	608b      	str	r3, [r1, #8]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	40023800 	.word	0x40023800

0800081c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800082c:	4904      	ldr	r1, [pc, #16]	; (8000840 <LL_RCC_SetAPB2Prescaler+0x24>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4313      	orrs	r3, r2
 8000832:	608b      	str	r3, [r1, #8]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	40023800 	.word	0x40023800

08000844 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <LL_RCC_PLL_Enable+0x1c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <LL_RCC_PLL_Enable+0x1c>)
 800084e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <LL_RCC_PLL_IsReady+0x24>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000874:	bf0c      	ite	eq
 8000876:	2301      	moveq	r3, #1
 8000878:	2300      	movne	r3, #0
 800087a:	b2db      	uxtb	r3, r3
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80008a0:	4013      	ands	r3, r2
 80008a2:	68f9      	ldr	r1, [r7, #12]
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	4311      	orrs	r1, r2
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	0192      	lsls	r2, r2, #6
 80008ac:	430a      	orrs	r2, r1
 80008ae:	4908      	ldr	r1, [pc, #32]	; (80008d0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80008b0:	4313      	orrs	r3, r2
 80008b2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80008bc:	4904      	ldr	r1, [pc, #16]	; (80008d0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	40023800 	.word	0x40023800
 80008d4:	ffbf8000 	.word	0xffbf8000

080008d8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008e4:	4907      	ldr	r1, [pc, #28]	; (8000904 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4013      	ands	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	40023800 	.word	0x40023800

08000908 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000914:	4907      	ldr	r1, [pc, #28]	; (8000934 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4313      	orrs	r3, r2
 800091a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <LL_APB2_GRP1_EnableClock+0x2c>)
 800091e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4013      	ands	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	40023800 	.word	0x40023800

08000938 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <LL_FLASH_SetLatency+0x24>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f023 0207 	bic.w	r2, r3, #7
 8000948:	4904      	ldr	r1, [pc, #16]	; (800095c <LL_FLASH_SetLatency+0x24>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4313      	orrs	r3, r2
 800094e:	600b      	str	r3, [r1, #0]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	40023c00 	.word	0x40023c00

08000960 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <LL_FLASH_GetLatency+0x18>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f003 0307 	and.w	r3, r3, #7
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023c00 	.word	0x40023c00

0800097c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800098c:	4904      	ldr	r1, [pc, #16]	; (80009a0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4313      	orrs	r3, r2
 8000992:	600b      	str	r3, [r1, #0]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40007000 	.word	0x40007000

080009a4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f043 0201 	orr.w	r2, r3, #1
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	601a      	str	r2, [r3, #0]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a1a      	ldr	r2, [r3, #32]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	431a      	orrs	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	621a      	str	r2, [r3, #32]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b085      	sub	sp, #20
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	4013      	ands	r3, r2
 8000a14:	041a      	lsls	r2, r3, #16
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	43d9      	mvns	r1, r3
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	400b      	ands	r3, r1
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	619a      	str	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <Buzzer_Start>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void Buzzer_Start(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
 8000a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a38:	480f      	ldr	r0, [pc, #60]	; (8000a78 <Buzzer_Start+0x48>)
 8000a3a:	f7ff ffe0 	bl	80009fe <LL_GPIO_TogglePin>
	LL_mDelay(100);
 8000a3e:	2064      	movs	r0, #100	; 0x64
 8000a40:	f001 fb54 	bl	80020ec <LL_mDelay>
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
 8000a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <Buzzer_Start+0x48>)
 8000a4a:	f7ff ffd8 	bl	80009fe <LL_GPIO_TogglePin>
	LL_mDelay(100);
 8000a4e:	2064      	movs	r0, #100	; 0x64
 8000a50:	f001 fb4c 	bl	80020ec <LL_mDelay>
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
 8000a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a58:	4807      	ldr	r0, [pc, #28]	; (8000a78 <Buzzer_Start+0x48>)
 8000a5a:	f7ff ffd0 	bl	80009fe <LL_GPIO_TogglePin>
	LL_mDelay(100);
 8000a5e:	2064      	movs	r0, #100	; 0x64
 8000a60:	f001 fb44 	bl	80020ec <LL_mDelay>
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
 8000a64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <Buzzer_Start+0x48>)
 8000a6a:	f7ff ffc8 	bl	80009fe <LL_GPIO_TogglePin>
	LL_mDelay(100);
 8000a6e:	2064      	movs	r0, #100	; 0x64
 8000a70:	f001 fb3c 	bl	80020ec <LL_mDelay>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	int setpoint = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
	int PID_p = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
	long enc_pendulum = 6;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	60fb      	str	r3, [r7, #12]
	long enc_line = 6;
 8000a8e:	2306      	movs	r3, #6
 8000a90:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a92:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a96:	f7ff ff37 	bl	8000908 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a9a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000a9e:	f7ff ff1b 	bl	80008d8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa2:	2007      	movs	r0, #7
 8000aa4:	f7ff fe28 	bl	80006f8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa8:	f000 f836 	bl	8000b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aac:	f7ff fcd8 	bl	8000460 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ab0:	f000 fbc2 	bl	8001238 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000ab4:	f000 fc4a 	bl	800134c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000ab8:	f000 fcc4 	bl	8001444 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  TIM4->CR1 |= (1<<0); // Запускаем энкодер 4
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <main+0x94>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <main+0x94>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6013      	str	r3, [r2, #0]
  TIM8->CR1 |= (1<<0); // Запускаем энкодер 8
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <main+0x98>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <main+0x98>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]

  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ada:	f7ff ff7f 	bl	80009dc <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH3);
 8000ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ae6:	f7ff ff79 	bl	80009dc <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8000aea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000aee:	f7ff ff59 	bl	80009a4 <LL_TIM_EnableCounter>
  Buzzer_Start();
 8000af2:	f7ff ff9d 	bl	8000a30 <Buzzer_Start>
  while (1)
  {

//if (flag_from_interapt == 0)
//{
	enc_pendulum = LL_TIM_GetCounter(TIM4);
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <main+0x94>)
 8000af8:	f7ff ff64 	bl	80009c4 <LL_TIM_GetCounter>
 8000afc:	4603      	mov	r3, r0
 8000afe:	60fb      	str	r3, [r7, #12]
	enc_line = LL_TIM_GetCounter(TIM8);
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <main+0x98>)
 8000b02:	f7ff ff5f 	bl	80009c4 <LL_TIM_GetCounter>
 8000b06:	4603      	mov	r3, r0
 8000b08:	60bb      	str	r3, [r7, #8]
	int x = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
  {
 8000b0e:	e7f2      	b.n	8000af6 <main+0x7a>
 8000b10:	40000800 	.word	0x40000800
 8000b14:	40010400 	.word	0x40010400

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000b1c:	2005      	movs	r0, #5
 8000b1e:	f7ff ff0b 	bl	8000938 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000b22:	bf00      	nop
 8000b24:	f7ff ff1c 	bl	8000960 <LL_FLASH_GetLatency>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b05      	cmp	r3, #5
 8000b2c:	d1fa      	bne.n	8000b24 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000b2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b32:	f7ff ff23 	bl	800097c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000b36:	f7ff fe03 	bl	8000740 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000b3a:	bf00      	nop
 8000b3c:	f7ff fe10 	bl	8000760 <LL_RCC_HSE_IsReady>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d1fa      	bne.n	8000b3c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
 8000b46:	2300      	movs	r3, #0
 8000b48:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000b52:	f7ff fe9b 	bl	800088c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000b56:	f7ff fe75 	bl	8000844 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000b5a:	bf00      	nop
 8000b5c:	f7ff fe82 	bl	8000864 <LL_RCC_PLL_IsReady>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d1fa      	bne.n	8000b5c <SystemClock_Config+0x44>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff fe30 	bl	80007cc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000b6c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000b70:	f7ff fe40 	bl	80007f4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000b74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b78:	f7ff fe50 	bl	800081c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f7ff fe03 	bl	8000788 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b82:	bf00      	nop
 8000b84:	f7ff fe14 	bl	80007b0 <LL_RCC_GetSysClkSource>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b08      	cmp	r3, #8
 8000b8c:	d1fa      	bne.n	8000b84 <SystemClock_Config+0x6c>
  {

  }
  LL_Init1msTick(168000000);
 8000b8e:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <SystemClock_Config+0x88>)
 8000b90:	f001 fa9e 	bl	80020d0 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <SystemClock_Config+0x88>)
 8000b96:	f001 facf 	bl	8002138 <LL_SetSystemCoreClock>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	0a037a00 	.word	0x0a037a00

08000ba4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000bae:	695a      	ldr	r2, [r3, #20]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	bf0c      	ite	eq
 8000bba:	2301      	moveq	r3, #1
 8000bbc:	2300      	movne	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40013c00 	.word	0x40013c00

08000bd0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6153      	str	r3, [r2, #20]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40013c00 	.word	0x40013c00

08000bf0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <LL_GPIO_SetOutputPin>:
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	619a      	str	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <LL_GPIO_ResetOutputPin>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	041a      	lsls	r2, r3, #16
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	619a      	str	r2, [r3, #24]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <NMI_Handler+0x4>

08000c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <HardFault_Handler+0x4>

08000c6e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <MemManage_Handler+0x4>

08000c74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <BusFault_Handler+0x4>

08000c7a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <UsageFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	flag_from_interapt = 1;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <EXTI9_5_IRQHandler+0x4c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	4810      	ldr	r0, [pc, #64]	; (8000d08 <EXTI9_5_IRQHandler+0x50>)
 8000cc6:	f7ff ffbd 	bl	8000c44 <LL_GPIO_ResetOutputPin>
	LL_TIM_OC_SetCompareCH3(TIM2,0);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cd0:	f7ff ff9c 	bl	8000c0c <LL_TIM_OC_SetCompareCH3>
	LL_TIM_OC_SetCompareCH2(TIM2,0);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cda:	f7ff ff89 	bl	8000bf0 <LL_TIM_OC_SetCompareCH2>
	LL_GPIO_SetOutputPin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin);
 8000cde:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <EXTI9_5_IRQHandler+0x54>)
 8000ce4:	f7ff ffa0 	bl	8000c28 <LL_GPIO_SetOutputPin>
	 //LL_TIM_DisableCounter(TIM2);

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8000ce8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cec:	f7ff ff5a 	bl	8000ba4 <LL_EXTI_IsActiveFlag_0_31>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <EXTI9_5_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
 8000cf6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cfa:	f7ff ff69 	bl	8000bd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000020 	.word	0x20000020
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020c00 	.word	0x40020c00

08000d10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	flag_from_interapt = 1;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <EXTI15_10_IRQHandler+0x40>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_2);
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <EXTI15_10_IRQHandler+0x44>)
 8000d1e:	f7ff ff83 	bl	8000c28 <LL_GPIO_SetOutputPin>
	LL_TIM_OC_SetCompareCH3(TIM2,100);
 8000d22:	2164      	movs	r1, #100	; 0x64
 8000d24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d28:	f7ff ff70 	bl	8000c0c <LL_TIM_OC_SetCompareCH3>
	LL_GPIO_SetOutputPin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin);
 8000d2c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <EXTI15_10_IRQHandler+0x48>)
 8000d32:	f7ff ff79 	bl	8000c28 <LL_GPIO_SetOutputPin>
	//LL_TIM_DisableCounter(TIM2);

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8000d36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d3a:	f7ff ff33 	bl	8000ba4 <LL_EXTI_IsActiveFlag_0_31>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <EXTI15_10_IRQHandler+0x3c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8000d44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d48:	f7ff ff42 	bl	8000bd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000020 	.word	0x20000020
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020c00 	.word	0x40020c00

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <LL_AHB1_GRP1_EnableClock>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	40023800 	.word	0x40023800

08000db0 <LL_APB1_GRP1_EnableClock>:
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	40023800 	.word	0x40023800

08000de0 <LL_APB2_GRP1_EnableClock>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40023800 	.word	0x40023800

08000e10 <LL_TIM_DisableARRPreload>:
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_TIM_OC_DisableFast>:
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d01c      	beq.n	8000e7a <LL_TIM_OC_DisableFast+0x4a>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d017      	beq.n	8000e76 <LL_TIM_OC_DisableFast+0x46>
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2b10      	cmp	r3, #16
 8000e4a:	d012      	beq.n	8000e72 <LL_TIM_OC_DisableFast+0x42>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b40      	cmp	r3, #64	; 0x40
 8000e50:	d00d      	beq.n	8000e6e <LL_TIM_OC_DisableFast+0x3e>
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e58:	d007      	beq.n	8000e6a <LL_TIM_OC_DisableFast+0x3a>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e60:	d101      	bne.n	8000e66 <LL_TIM_OC_DisableFast+0x36>
 8000e62:	2305      	movs	r3, #5
 8000e64:	e00a      	b.n	8000e7c <LL_TIM_OC_DisableFast+0x4c>
 8000e66:	2306      	movs	r3, #6
 8000e68:	e008      	b.n	8000e7c <LL_TIM_OC_DisableFast+0x4c>
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	e006      	b.n	8000e7c <LL_TIM_OC_DisableFast+0x4c>
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e004      	b.n	8000e7c <LL_TIM_OC_DisableFast+0x4c>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e002      	b.n	8000e7c <LL_TIM_OC_DisableFast+0x4c>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <LL_TIM_OC_DisableFast+0x4c>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3318      	adds	r3, #24
 8000e82:	4619      	mov	r1, r3
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <LL_TIM_OC_DisableFast+0x84>)
 8000e88:	5cd3      	ldrb	r3, [r2, r3]
 8000e8a:	440b      	add	r3, r1
 8000e8c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <LL_TIM_OC_DisableFast+0x88>)
 8000e96:	5ccb      	ldrb	r3, [r1, r3]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	408b      	lsls	r3, r1
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	601a      	str	r2, [r3, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	080021c8 	.word	0x080021c8
 8000eb8:	080021d0 	.word	0x080021d0

08000ebc <LL_TIM_OC_EnablePreload>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d01c      	beq.n	8000f06 <LL_TIM_OC_EnablePreload+0x4a>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d017      	beq.n	8000f02 <LL_TIM_OC_EnablePreload+0x46>
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2b10      	cmp	r3, #16
 8000ed6:	d012      	beq.n	8000efe <LL_TIM_OC_EnablePreload+0x42>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2b40      	cmp	r3, #64	; 0x40
 8000edc:	d00d      	beq.n	8000efa <LL_TIM_OC_EnablePreload+0x3e>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ee4:	d007      	beq.n	8000ef6 <LL_TIM_OC_EnablePreload+0x3a>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eec:	d101      	bne.n	8000ef2 <LL_TIM_OC_EnablePreload+0x36>
 8000eee:	2305      	movs	r3, #5
 8000ef0:	e00a      	b.n	8000f08 <LL_TIM_OC_EnablePreload+0x4c>
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	e008      	b.n	8000f08 <LL_TIM_OC_EnablePreload+0x4c>
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	e006      	b.n	8000f08 <LL_TIM_OC_EnablePreload+0x4c>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e004      	b.n	8000f08 <LL_TIM_OC_EnablePreload+0x4c>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e002      	b.n	8000f08 <LL_TIM_OC_EnablePreload+0x4c>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <LL_TIM_OC_EnablePreload+0x4c>
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3318      	adds	r3, #24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <LL_TIM_OC_EnablePreload+0x80>)
 8000f14:	5cd3      	ldrb	r3, [r2, r3]
 8000f16:	440b      	add	r3, r1
 8000f18:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	4907      	ldr	r1, [pc, #28]	; (8000f40 <LL_TIM_OC_EnablePreload+0x84>)
 8000f22:	5ccb      	ldrb	r3, [r1, r3]
 8000f24:	4619      	mov	r1, r3
 8000f26:	2308      	movs	r3, #8
 8000f28:	408b      	lsls	r3, r1
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	601a      	str	r2, [r3, #0]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	080021c8 	.word	0x080021c8
 8000f40:	080021d0 	.word	0x080021d0

08000f44 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d01c      	beq.n	8000f90 <LL_TIM_IC_SetActiveInput+0x4c>
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d017      	beq.n	8000f8c <LL_TIM_IC_SetActiveInput+0x48>
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2b10      	cmp	r3, #16
 8000f60:	d012      	beq.n	8000f88 <LL_TIM_IC_SetActiveInput+0x44>
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2b40      	cmp	r3, #64	; 0x40
 8000f66:	d00d      	beq.n	8000f84 <LL_TIM_IC_SetActiveInput+0x40>
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f6e:	d007      	beq.n	8000f80 <LL_TIM_IC_SetActiveInput+0x3c>
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f76:	d101      	bne.n	8000f7c <LL_TIM_IC_SetActiveInput+0x38>
 8000f78:	2305      	movs	r3, #5
 8000f7a:	e00a      	b.n	8000f92 <LL_TIM_IC_SetActiveInput+0x4e>
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	e008      	b.n	8000f92 <LL_TIM_IC_SetActiveInput+0x4e>
 8000f80:	2304      	movs	r3, #4
 8000f82:	e006      	b.n	8000f92 <LL_TIM_IC_SetActiveInput+0x4e>
 8000f84:	2303      	movs	r3, #3
 8000f86:	e004      	b.n	8000f92 <LL_TIM_IC_SetActiveInput+0x4e>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e002      	b.n	8000f92 <LL_TIM_IC_SetActiveInput+0x4e>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <LL_TIM_IC_SetActiveInput+0x4e>
 8000f90:	2300      	movs	r3, #0
 8000f92:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3318      	adds	r3, #24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <LL_TIM_IC_SetActiveInput+0x94>)
 8000f9e:	5cd3      	ldrb	r3, [r2, r3]
 8000fa0:	440b      	add	r3, r1
 8000fa2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	490c      	ldr	r1, [pc, #48]	; (8000fdc <LL_TIM_IC_SetActiveInput+0x98>)
 8000fac:	5ccb      	ldrb	r3, [r1, r3]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	408b      	lsls	r3, r1
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	0c1b      	lsrs	r3, r3, #16
 8000fbc:	7df9      	ldrb	r1, [r7, #23]
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <LL_TIM_IC_SetActiveInput+0x98>)
 8000fc0:	5c41      	ldrb	r1, [r0, r1]
 8000fc2:	408b      	lsls	r3, r1
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	080021c8 	.word	0x080021c8
 8000fdc:	080021d8 	.word	0x080021d8

08000fe0 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d01c      	beq.n	800102c <LL_TIM_IC_SetPrescaler+0x4c>
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d017      	beq.n	8001028 <LL_TIM_IC_SetPrescaler+0x48>
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b10      	cmp	r3, #16
 8000ffc:	d012      	beq.n	8001024 <LL_TIM_IC_SetPrescaler+0x44>
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2b40      	cmp	r3, #64	; 0x40
 8001002:	d00d      	beq.n	8001020 <LL_TIM_IC_SetPrescaler+0x40>
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800100a:	d007      	beq.n	800101c <LL_TIM_IC_SetPrescaler+0x3c>
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001012:	d101      	bne.n	8001018 <LL_TIM_IC_SetPrescaler+0x38>
 8001014:	2305      	movs	r3, #5
 8001016:	e00a      	b.n	800102e <LL_TIM_IC_SetPrescaler+0x4e>
 8001018:	2306      	movs	r3, #6
 800101a:	e008      	b.n	800102e <LL_TIM_IC_SetPrescaler+0x4e>
 800101c:	2304      	movs	r3, #4
 800101e:	e006      	b.n	800102e <LL_TIM_IC_SetPrescaler+0x4e>
 8001020:	2303      	movs	r3, #3
 8001022:	e004      	b.n	800102e <LL_TIM_IC_SetPrescaler+0x4e>
 8001024:	2302      	movs	r3, #2
 8001026:	e002      	b.n	800102e <LL_TIM_IC_SetPrescaler+0x4e>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <LL_TIM_IC_SetPrescaler+0x4e>
 800102c:	2300      	movs	r3, #0
 800102e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3318      	adds	r3, #24
 8001034:	4619      	mov	r1, r3
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <LL_TIM_IC_SetPrescaler+0x94>)
 800103a:	5cd3      	ldrb	r3, [r2, r3]
 800103c:	440b      	add	r3, r1
 800103e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	490c      	ldr	r1, [pc, #48]	; (8001078 <LL_TIM_IC_SetPrescaler+0x98>)
 8001048:	5ccb      	ldrb	r3, [r1, r3]
 800104a:	4619      	mov	r1, r3
 800104c:	230c      	movs	r3, #12
 800104e:	408b      	lsls	r3, r1
 8001050:	43db      	mvns	r3, r3
 8001052:	401a      	ands	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	0c1b      	lsrs	r3, r3, #16
 8001058:	7df9      	ldrb	r1, [r7, #23]
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <LL_TIM_IC_SetPrescaler+0x98>)
 800105c:	5c41      	ldrb	r1, [r0, r1]
 800105e:	408b      	lsls	r3, r1
 8001060:	431a      	orrs	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	080021c8 	.word	0x080021c8
 8001078:	080021d8 	.word	0x080021d8

0800107c <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d01c      	beq.n	80010c8 <LL_TIM_IC_SetFilter+0x4c>
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b04      	cmp	r3, #4
 8001092:	d017      	beq.n	80010c4 <LL_TIM_IC_SetFilter+0x48>
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2b10      	cmp	r3, #16
 8001098:	d012      	beq.n	80010c0 <LL_TIM_IC_SetFilter+0x44>
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2b40      	cmp	r3, #64	; 0x40
 800109e:	d00d      	beq.n	80010bc <LL_TIM_IC_SetFilter+0x40>
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a6:	d007      	beq.n	80010b8 <LL_TIM_IC_SetFilter+0x3c>
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ae:	d101      	bne.n	80010b4 <LL_TIM_IC_SetFilter+0x38>
 80010b0:	2305      	movs	r3, #5
 80010b2:	e00a      	b.n	80010ca <LL_TIM_IC_SetFilter+0x4e>
 80010b4:	2306      	movs	r3, #6
 80010b6:	e008      	b.n	80010ca <LL_TIM_IC_SetFilter+0x4e>
 80010b8:	2304      	movs	r3, #4
 80010ba:	e006      	b.n	80010ca <LL_TIM_IC_SetFilter+0x4e>
 80010bc:	2303      	movs	r3, #3
 80010be:	e004      	b.n	80010ca <LL_TIM_IC_SetFilter+0x4e>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e002      	b.n	80010ca <LL_TIM_IC_SetFilter+0x4e>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <LL_TIM_IC_SetFilter+0x4e>
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3318      	adds	r3, #24
 80010d0:	4619      	mov	r1, r3
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <LL_TIM_IC_SetFilter+0x94>)
 80010d6:	5cd3      	ldrb	r3, [r2, r3]
 80010d8:	440b      	add	r3, r1
 80010da:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	490c      	ldr	r1, [pc, #48]	; (8001114 <LL_TIM_IC_SetFilter+0x98>)
 80010e4:	5ccb      	ldrb	r3, [r1, r3]
 80010e6:	4619      	mov	r1, r3
 80010e8:	23f0      	movs	r3, #240	; 0xf0
 80010ea:	408b      	lsls	r3, r1
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	0c1b      	lsrs	r3, r3, #16
 80010f4:	7df9      	ldrb	r1, [r7, #23]
 80010f6:	4807      	ldr	r0, [pc, #28]	; (8001114 <LL_TIM_IC_SetFilter+0x98>)
 80010f8:	5c41      	ldrb	r1, [r0, r1]
 80010fa:	408b      	lsls	r3, r1
 80010fc:	431a      	orrs	r2, r3
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	601a      	str	r2, [r3, #0]
}
 8001102:	bf00      	nop
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	080021c8 	.word	0x080021c8
 8001114:	080021d8 	.word	0x080021d8

08001118 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d01c      	beq.n	8001164 <LL_TIM_IC_SetPolarity+0x4c>
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b04      	cmp	r3, #4
 800112e:	d017      	beq.n	8001160 <LL_TIM_IC_SetPolarity+0x48>
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d012      	beq.n	800115c <LL_TIM_IC_SetPolarity+0x44>
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b40      	cmp	r3, #64	; 0x40
 800113a:	d00d      	beq.n	8001158 <LL_TIM_IC_SetPolarity+0x40>
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001142:	d007      	beq.n	8001154 <LL_TIM_IC_SetPolarity+0x3c>
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114a:	d101      	bne.n	8001150 <LL_TIM_IC_SetPolarity+0x38>
 800114c:	2305      	movs	r3, #5
 800114e:	e00a      	b.n	8001166 <LL_TIM_IC_SetPolarity+0x4e>
 8001150:	2306      	movs	r3, #6
 8001152:	e008      	b.n	8001166 <LL_TIM_IC_SetPolarity+0x4e>
 8001154:	2304      	movs	r3, #4
 8001156:	e006      	b.n	8001166 <LL_TIM_IC_SetPolarity+0x4e>
 8001158:	2303      	movs	r3, #3
 800115a:	e004      	b.n	8001166 <LL_TIM_IC_SetPolarity+0x4e>
 800115c:	2302      	movs	r3, #2
 800115e:	e002      	b.n	8001166 <LL_TIM_IC_SetPolarity+0x4e>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <LL_TIM_IC_SetPolarity+0x4e>
 8001164:	2300      	movs	r3, #0
 8001166:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	490b      	ldr	r1, [pc, #44]	; (800119c <LL_TIM_IC_SetPolarity+0x84>)
 8001170:	5ccb      	ldrb	r3, [r1, r3]
 8001172:	4619      	mov	r1, r3
 8001174:	230a      	movs	r3, #10
 8001176:	408b      	lsls	r3, r1
 8001178:	43db      	mvns	r3, r3
 800117a:	401a      	ands	r2, r3
 800117c:	7dfb      	ldrb	r3, [r7, #23]
 800117e:	4907      	ldr	r1, [pc, #28]	; (800119c <LL_TIM_IC_SetPolarity+0x84>)
 8001180:	5ccb      	ldrb	r3, [r1, r3]
 8001182:	4619      	mov	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	408b      	lsls	r3, r1
 8001188:	431a      	orrs	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 800118e:	bf00      	nop
 8001190:	371c      	adds	r7, #28
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	080021e0 	.word	0x080021e0

080011a0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011b2:	f023 0307 	bic.w	r3, r3, #7
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f023 0207 	bic.w	r2, r3, #7
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	609a      	str	r2, [r3, #8]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	605a      	str	r2, [r3, #4]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	609a      	str	r2, [r3, #8]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	; 0x50
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800123e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2220      	movs	r2, #32
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f000 ffa2 	bl	80021a0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff fd9f 	bl	8000db0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 42;
 8001272:	232a      	movs	r3, #42	; 0x2a
 8001274:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001276:	2300      	movs	r3, #0
 8001278:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 100;
 800127a:	2364      	movs	r3, #100	; 0x64
 800127c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001282:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800128c:	f000 fc86 	bl	8001b9c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001290:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001294:	f7ff fdbc 	bl	8000e10 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001298:	2100      	movs	r1, #0
 800129a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800129e:	f7ff ff7f 	bl	80011a0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80012a2:	2110      	movs	r1, #16
 80012a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012a8:	f7ff fe08 	bl	8000ebc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80012ac:	2360      	movs	r3, #96	; 0x60
 80012ae:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	461a      	mov	r2, r3
 80012c6:	2110      	movs	r1, #16
 80012c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012cc:	f000 fd00 	bl	8001cd0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 80012d0:	2110      	movs	r1, #16
 80012d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012d6:	f7ff fdab 	bl	8000e30 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 80012da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012e2:	f7ff fdeb 	bl	8000ebc <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	461a      	mov	r2, r3
 80012ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012f4:	f000 fcec 	bl	8001cd0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 80012f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001300:	f7ff fd96 	bl	8000e30 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001304:	2100      	movs	r1, #0
 8001306:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800130a:	f7ff ff71 	bl	80011f0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800130e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001312:	f7ff ff80 	bl	8001216 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff fd32 	bl	8000d80 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 800131c:	2306      	movs	r3, #6
 800131e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001320:	2302      	movs	r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <MX_TIM2_Init+0x110>)
 800133a:	f000 fb49 	bl	80019d0 <LL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3750      	adds	r7, #80	; 0x50
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40020000 	.word	0x40020000

0800134c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001372:	2004      	movs	r0, #4
 8001374:	f7ff fd1c 	bl	8000db0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001378:	2002      	movs	r0, #2
 800137a:	f7ff fd01 	bl	8000d80 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800137e:	23c0      	movs	r3, #192	; 0xc0
 8001380:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001382:	2302      	movs	r3, #2
 8001384:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800138e:	2301      	movs	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	4619      	mov	r1, r3
 800139a:	4828      	ldr	r0, [pc, #160]	; (800143c <MX_TIM4_Init+0xf0>)
 800139c:	f000 fb18 	bl	80019d0 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 80013a0:	2101      	movs	r1, #1
 80013a2:	4827      	ldr	r0, [pc, #156]	; (8001440 <MX_TIM4_Init+0xf4>)
 80013a4:	f7ff ff11 	bl	80011ca <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80013a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ac:	2101      	movs	r1, #1
 80013ae:	4824      	ldr	r0, [pc, #144]	; (8001440 <MX_TIM4_Init+0xf4>)
 80013b0:	f7ff fdc8 	bl	8000f44 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2101      	movs	r1, #1
 80013b8:	4821      	ldr	r0, [pc, #132]	; (8001440 <MX_TIM4_Init+0xf4>)
 80013ba:	f7ff fe11 	bl	8000fe0 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
 80013be:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80013c2:	2101      	movs	r1, #1
 80013c4:	481e      	ldr	r0, [pc, #120]	; (8001440 <MX_TIM4_Init+0xf4>)
 80013c6:	f7ff fe59 	bl	800107c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2101      	movs	r1, #1
 80013ce:	481c      	ldr	r0, [pc, #112]	; (8001440 <MX_TIM4_Init+0xf4>)
 80013d0:	f7ff fea2 	bl	8001118 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80013d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013d8:	2110      	movs	r1, #16
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <MX_TIM4_Init+0xf4>)
 80013dc:	f7ff fdb2 	bl	8000f44 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2110      	movs	r1, #16
 80013e4:	4816      	ldr	r0, [pc, #88]	; (8001440 <MX_TIM4_Init+0xf4>)
 80013e6:	f7ff fdfb 	bl	8000fe0 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
 80013ea:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80013ee:	2110      	movs	r1, #16
 80013f0:	4813      	ldr	r0, [pc, #76]	; (8001440 <MX_TIM4_Init+0xf4>)
 80013f2:	f7ff fe43 	bl	800107c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2110      	movs	r1, #16
 80013fa:	4811      	ldr	r0, [pc, #68]	; (8001440 <MX_TIM4_Init+0xf4>)
 80013fc:	f7ff fe8c 	bl	8001118 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8001408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <MX_TIM4_Init+0xf4>)
 800141a:	f000 fbbf 	bl	8001b9c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800141e:	4808      	ldr	r0, [pc, #32]	; (8001440 <MX_TIM4_Init+0xf4>)
 8001420:	f7ff fcf6 	bl	8000e10 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001424:	2100      	movs	r1, #0
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_TIM4_Init+0xf4>)
 8001428:	f7ff fee2 	bl	80011f0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_TIM4_Init+0xf4>)
 800142e:	f7ff fef2 	bl	8001216 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3730      	adds	r7, #48	; 0x30
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40020400 	.word	0x40020400
 8001440:	40000800 	.word	0x40000800

08001444 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 800146a:	2002      	movs	r0, #2
 800146c:	f7ff fcb8 	bl	8000de0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001470:	2004      	movs	r0, #4
 8001472:	f7ff fc85 	bl	8000d80 <LL_AHB1_GRP1_EnableClock>
  /**TIM8 GPIO Configuration
  PC6   ------> TIM8_CH1
  PC7   ------> TIM8_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001476:	23c0      	movs	r3, #192	; 0xc0
 8001478:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800147a:	2302      	movs	r3, #2
 800147c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001486:	2301      	movs	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 800148a:	2303      	movs	r3, #3
 800148c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4829      	ldr	r0, [pc, #164]	; (8001538 <MX_TIM8_Init+0xf4>)
 8001494:	f000 fa9c 	bl	80019d0 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  LL_TIM_SetEncoderMode(TIM8, LL_TIM_ENCODERMODE_X2_TI1);
 8001498:	2101      	movs	r1, #1
 800149a:	4828      	ldr	r0, [pc, #160]	; (800153c <MX_TIM8_Init+0xf8>)
 800149c:	f7ff fe95 	bl	80011ca <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80014a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a4:	2101      	movs	r1, #1
 80014a6:	4825      	ldr	r0, [pc, #148]	; (800153c <MX_TIM8_Init+0xf8>)
 80014a8:	f7ff fd4c 	bl	8000f44 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2101      	movs	r1, #1
 80014b0:	4822      	ldr	r0, [pc, #136]	; (800153c <MX_TIM8_Init+0xf8>)
 80014b2:	f7ff fd95 	bl	8000fe0 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
 80014b6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80014ba:	2101      	movs	r1, #1
 80014bc:	481f      	ldr	r0, [pc, #124]	; (800153c <MX_TIM8_Init+0xf8>)
 80014be:	f7ff fddd 	bl	800107c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2101      	movs	r1, #1
 80014c6:	481d      	ldr	r0, [pc, #116]	; (800153c <MX_TIM8_Init+0xf8>)
 80014c8:	f7ff fe26 	bl	8001118 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80014cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d0:	2110      	movs	r1, #16
 80014d2:	481a      	ldr	r0, [pc, #104]	; (800153c <MX_TIM8_Init+0xf8>)
 80014d4:	f7ff fd36 	bl	8000f44 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80014d8:	2200      	movs	r2, #0
 80014da:	2110      	movs	r1, #16
 80014dc:	4817      	ldr	r0, [pc, #92]	; (800153c <MX_TIM8_Init+0xf8>)
 80014de:	f7ff fd7f 	bl	8000fe0 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
 80014e2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80014e6:	2110      	movs	r1, #16
 80014e8:	4814      	ldr	r0, [pc, #80]	; (800153c <MX_TIM8_Init+0xf8>)
 80014ea:	f7ff fdc7 	bl	800107c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2110      	movs	r1, #16
 80014f2:	4812      	ldr	r0, [pc, #72]	; (800153c <MX_TIM8_Init+0xf8>)
 80014f4:	f7ff fe10 	bl	8001118 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8001500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.RepetitionCounter = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <MX_TIM8_Init+0xf8>)
 8001516:	f000 fb41 	bl	8001b9c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 800151a:	4808      	ldr	r0, [pc, #32]	; (800153c <MX_TIM8_Init+0xf8>)
 800151c:	f7ff fc78 	bl	8000e10 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8001520:	2100      	movs	r1, #0
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <MX_TIM8_Init+0xf8>)
 8001524:	f7ff fe64 	bl	80011f0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_TIM8_Init+0xf8>)
 800152a:	f7ff fe74 	bl	8001216 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	3730      	adds	r7, #48	; 0x30
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40020800 	.word	0x40020800
 800153c:	40010400 	.word	0x40010400

08001540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800155c:	4c0b      	ldr	r4, [pc, #44]	; (800158c <LoopFillZerobss+0x26>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800156a:	f7ff fbf7 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156e:	f000 fdf3 	bl	8002158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001572:	f7ff fa83 	bl	8000a7c <main>
  bx  lr    
 8001576:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001578:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001584:	080021f0 	.word	0x080021f0
  ldr r2, =_sbss
 8001588:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800158c:	20000024 	.word	0x20000024

08001590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC_IRQHandler>
	...

08001594 <LL_EXTI_EnableIT_0_31>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <LL_EXTI_EnableIT_0_31+0x20>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4904      	ldr	r1, [pc, #16]	; (80015b4 <LL_EXTI_EnableIT_0_31+0x20>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40013c00 	.word	0x40013c00

080015b8 <LL_EXTI_DisableIT_0_31>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <LL_EXTI_DisableIT_0_31+0x24>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	4904      	ldr	r1, [pc, #16]	; (80015dc <LL_EXTI_DisableIT_0_31+0x24>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <LL_EXTI_EnableEvent_0_31>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <LL_EXTI_EnableEvent_0_31+0x20>)
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4904      	ldr	r1, [pc, #16]	; (8001600 <LL_EXTI_EnableEvent_0_31+0x20>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40013c00 	.word	0x40013c00

08001604 <LL_EXTI_DisableEvent_0_31>:
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <LL_EXTI_DisableEvent_0_31+0x24>)
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	43db      	mvns	r3, r3
 8001614:	4904      	ldr	r1, [pc, #16]	; (8001628 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001616:	4013      	ands	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40013c00 	.word	0x40013c00

0800162c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	4904      	ldr	r1, [pc, #16]	; (800164c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40013c00 	.word	0x40013c00

08001650 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	43db      	mvns	r3, r3
 8001660:	4904      	ldr	r1, [pc, #16]	; (8001674 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001662:	4013      	ands	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40013c00 	.word	0x40013c00

08001678 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	4904      	ldr	r1, [pc, #16]	; (8001698 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4313      	orrs	r3, r2
 800168a:	60cb      	str	r3, [r1, #12]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40013c00 	.word	0x40013c00

0800169c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4904      	ldr	r1, [pc, #16]	; (80016c0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	60cb      	str	r3, [r1, #12]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40013c00 	.word	0x40013c00

080016c4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	791b      	ldrb	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d065      	beq.n	80017a4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d06c      	beq.n	80017ba <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	795b      	ldrb	r3, [r3, #5]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d01c      	beq.n	8001722 <LL_EXTI_Init+0x5e>
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	dc25      	bgt.n	8001738 <LL_EXTI_Init+0x74>
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <LL_EXTI_Init+0x32>
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d00b      	beq.n	800170c <LL_EXTI_Init+0x48>
 80016f4:	e020      	b.n	8001738 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff82 	bl	8001604 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff45 	bl	8001594 <LL_EXTI_EnableIT_0_31>
          break;
 800170a:	e018      	b.n	800173e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff51 	bl	80015b8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff60 	bl	80015e0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001720:	e00d      	b.n	800173e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff34 	bl	8001594 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff55 	bl	80015e0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001736:	e002      	b.n	800173e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
          break;
 800173c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	799b      	ldrb	r3, [r3, #6]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d039      	beq.n	80017ba <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	799b      	ldrb	r3, [r3, #6]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d01c      	beq.n	8001788 <LL_EXTI_Init+0xc4>
 800174e:	2b03      	cmp	r3, #3
 8001750:	dc25      	bgt.n	800179e <LL_EXTI_Init+0xda>
 8001752:	2b01      	cmp	r3, #1
 8001754:	d002      	beq.n	800175c <LL_EXTI_Init+0x98>
 8001756:	2b02      	cmp	r3, #2
 8001758:	d00b      	beq.n	8001772 <LL_EXTI_Init+0xae>
 800175a:	e020      	b.n	800179e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff9b 	bl	800169c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff5e 	bl	800162c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001770:	e024      	b.n	80017bc <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff6a 	bl	8001650 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff79 	bl	8001678 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001786:	e019      	b.n	80017bc <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff4d 	bl	800162c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff6e 	bl	8001678 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800179c:	e00e      	b.n	80017bc <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
            break;
 80017a2:	e00b      	b.n	80017bc <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff05 	bl	80015b8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff26 	bl	8001604 <LL_EXTI_DisableEvent_0_31>
 80017b8:	e000      	b.n	80017bc <LL_EXTI_Init+0xf8>
      }
 80017ba:	bf00      	nop
  }
  return status;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <LL_GPIO_SetPinMode>:
{
 80017c6:	b480      	push	{r7}
 80017c8:	b089      	sub	sp, #36	; 0x24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	613b      	str	r3, [r7, #16]
  return result;
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	2103      	movs	r1, #3
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	401a      	ands	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	61bb      	str	r3, [r7, #24]
  return result;
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	fab3 f383 	clz	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	431a      	orrs	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	601a      	str	r2, [r3, #0]
}
 8001818:	bf00      	nop
 800181a:	3724      	adds	r7, #36	; 0x24
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_GPIO_SetPinOutputType>:
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	43db      	mvns	r3, r3
 8001838:	401a      	ands	r2, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	431a      	orrs	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	605a      	str	r2, [r3, #4]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_GPIO_SetPinSpeed>:
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	613b      	str	r3, [r7, #16]
  return result;
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2103      	movs	r1, #3
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	401a      	ands	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	61bb      	str	r3, [r7, #24]
  return result;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	431a      	orrs	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	609a      	str	r2, [r3, #8]
}
 80018a6:	bf00      	nop
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_GPIO_SetPinPull>:
{
 80018b2:	b480      	push	{r7}
 80018b4:	b089      	sub	sp, #36	; 0x24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	613b      	str	r3, [r7, #16]
  return result;
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2103      	movs	r1, #3
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	401a      	ands	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	61bb      	str	r3, [r7, #24]
  return result;
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	431a      	orrs	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	60da      	str	r2, [r3, #12]
}
 8001904:	bf00      	nop
 8001906:	3724      	adds	r7, #36	; 0x24
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_GPIO_SetAFPin_0_7>:
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a1a      	ldr	r2, [r3, #32]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	613b      	str	r3, [r7, #16]
  return result;
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	210f      	movs	r1, #15
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	401a      	ands	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	61bb      	str	r3, [r7, #24]
  return result;
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	431a      	orrs	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	621a      	str	r2, [r3, #32]
}
 8001962:	bf00      	nop
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_GPIO_SetAFPin_8_15>:
{
 800196e:	b480      	push	{r7}
 8001970:	b089      	sub	sp, #36	; 0x24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	613b      	str	r3, [r7, #16]
  return result;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	210f      	movs	r1, #15
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	61bb      	str	r3, [r7, #24]
  return result;
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	431a      	orrs	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019c4:	bf00      	nop
 80019c6:	3724      	adds	r7, #36	; 0x24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa93 f3a3 	rbit	r3, r3
 80019ee:	613b      	str	r3, [r7, #16]
  return result;
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	fab3 f383 	clz	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80019fa:	e050      	b.n	8001a9e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2101      	movs	r1, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d042      	beq.n	8001a98 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d003      	beq.n	8001a22 <LL_GPIO_Init+0x52>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d10d      	bne.n	8001a3e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	461a      	mov	r2, r3
 8001a28:	69b9      	ldr	r1, [r7, #24]
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff12 	bl	8001854 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	461a      	mov	r2, r3
 8001a36:	69b9      	ldr	r1, [r7, #24]
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fef3 	bl	8001824 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	461a      	mov	r2, r3
 8001a44:	69b9      	ldr	r1, [r7, #24]
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff33 	bl	80018b2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d11a      	bne.n	8001a8a <LL_GPIO_Init+0xba>
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	60bb      	str	r3, [r7, #8]
  return result;
 8001a60:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b07      	cmp	r3, #7
 8001a6a:	d807      	bhi.n	8001a7c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	461a      	mov	r2, r3
 8001a72:	69b9      	ldr	r1, [r7, #24]
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff4b 	bl	8001910 <LL_GPIO_SetAFPin_0_7>
 8001a7a:	e006      	b.n	8001a8a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	461a      	mov	r2, r3
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff72 	bl	800196e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	69b9      	ldr	r1, [r7, #24]
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fe97 	bl	80017c6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1a7      	bne.n	80019fc <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <LL_TIM_SetPrescaler>:
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_TIM_SetAutoReload>:
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_TIM_SetRepetitionCounter>:
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_TIM_OC_SetCompareCH1>:
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_TIM_OC_SetCompareCH2>:
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <LL_TIM_OC_SetCompareCH3>:
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_TIM_OC_SetCompareCH4>:
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	615a      	str	r2, [r3, #20]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a3d      	ldr	r2, [pc, #244]	; (8001ca4 <LL_TIM_Init+0x108>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <LL_TIM_Init+0x40>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bba:	d00f      	beq.n	8001bdc <LL_TIM_Init+0x40>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ca8 <LL_TIM_Init+0x10c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00b      	beq.n	8001bdc <LL_TIM_Init+0x40>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a39      	ldr	r2, [pc, #228]	; (8001cac <LL_TIM_Init+0x110>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d007      	beq.n	8001bdc <LL_TIM_Init+0x40>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a38      	ldr	r2, [pc, #224]	; (8001cb0 <LL_TIM_Init+0x114>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d003      	beq.n	8001bdc <LL_TIM_Init+0x40>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a37      	ldr	r2, [pc, #220]	; (8001cb4 <LL_TIM_Init+0x118>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d106      	bne.n	8001bea <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a2d      	ldr	r2, [pc, #180]	; (8001ca4 <LL_TIM_Init+0x108>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d02b      	beq.n	8001c4a <LL_TIM_Init+0xae>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf8:	d027      	beq.n	8001c4a <LL_TIM_Init+0xae>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <LL_TIM_Init+0x10c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d023      	beq.n	8001c4a <LL_TIM_Init+0xae>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a29      	ldr	r2, [pc, #164]	; (8001cac <LL_TIM_Init+0x110>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01f      	beq.n	8001c4a <LL_TIM_Init+0xae>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a28      	ldr	r2, [pc, #160]	; (8001cb0 <LL_TIM_Init+0x114>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01b      	beq.n	8001c4a <LL_TIM_Init+0xae>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <LL_TIM_Init+0x118>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d017      	beq.n	8001c4a <LL_TIM_Init+0xae>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <LL_TIM_Init+0x11c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <LL_TIM_Init+0xae>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <LL_TIM_Init+0x120>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00f      	beq.n	8001c4a <LL_TIM_Init+0xae>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a24      	ldr	r2, [pc, #144]	; (8001cc0 <LL_TIM_Init+0x124>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00b      	beq.n	8001c4a <LL_TIM_Init+0xae>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <LL_TIM_Init+0x128>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <LL_TIM_Init+0xae>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <LL_TIM_Init+0x12c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d003      	beq.n	8001c4a <LL_TIM_Init+0xae>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <LL_TIM_Init+0x130>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d106      	bne.n	8001c58 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4619      	mov	r1, r3
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff34 	bl	8001ad2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff20 	bl	8001ab6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <LL_TIM_Init+0x108>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d003      	beq.n	8001c86 <LL_TIM_Init+0xea>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <LL_TIM_Init+0x118>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d105      	bne.n	8001c92 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff2e 	bl	8001aee <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ff71 	bl	8001b7a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	40000800 	.word	0x40000800
 8001cb0:	40000c00 	.word	0x40000c00
 8001cb4:	40010400 	.word	0x40010400
 8001cb8:	40014000 	.word	0x40014000
 8001cbc:	40014400 	.word	0x40014400
 8001cc0:	40014800 	.word	0x40014800
 8001cc4:	40001800 	.word	0x40001800
 8001cc8:	40001c00 	.word	0x40001c00
 8001ccc:	40002000 	.word	0x40002000

08001cd0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce6:	d027      	beq.n	8001d38 <LL_TIM_OC_Init+0x68>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cee:	d82a      	bhi.n	8001d46 <LL_TIM_OC_Init+0x76>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cf6:	d018      	beq.n	8001d2a <LL_TIM_OC_Init+0x5a>
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfe:	d822      	bhi.n	8001d46 <LL_TIM_OC_Init+0x76>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d003      	beq.n	8001d0e <LL_TIM_OC_Init+0x3e>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d007      	beq.n	8001d1c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001d0c:	e01b      	b.n	8001d46 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 f81f 	bl	8001d54 <OC1Config>
 8001d16:	4603      	mov	r3, r0
 8001d18:	75fb      	strb	r3, [r7, #23]
      break;
 8001d1a:	e015      	b.n	8001d48 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f884 	bl	8001e2c <OC2Config>
 8001d24:	4603      	mov	r3, r0
 8001d26:	75fb      	strb	r3, [r7, #23]
      break;
 8001d28:	e00e      	b.n	8001d48 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 f8ed 	bl	8001f0c <OC3Config>
 8001d32:	4603      	mov	r3, r0
 8001d34:	75fb      	strb	r3, [r7, #23]
      break;
 8001d36:	e007      	b.n	8001d48 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f956 	bl	8001fec <OC4Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	75fb      	strb	r3, [r7, #23]
      break;
 8001d44:	e000      	b.n	8001d48 <LL_TIM_OC_Init+0x78>
      break;
 8001d46:	bf00      	nop
  }

  return result;
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	f023 0201 	bic.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f023 0202 	bic.w	r2, r3, #2
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f023 0201 	bic.w	r2, r3, #1
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a1c      	ldr	r2, [pc, #112]	; (8001e24 <OC1Config+0xd0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d003      	beq.n	8001dbe <OC1Config+0x6a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a1b      	ldr	r2, [pc, #108]	; (8001e28 <OC1Config+0xd4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d11e      	bne.n	8001dfc <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f023 0208 	bic.w	r2, r3, #8
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f023 0204 	bic.w	r2, r3, #4
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fe7b 	bl	8001b0a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40010400 	.word	0x40010400

08001e2c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	f023 0210 	bic.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f023 0220 	bic.w	r2, r3, #32
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f023 0210 	bic.w	r2, r3, #16
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <OC2Config+0xd8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d003      	beq.n	8001e9c <OC2Config+0x70>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <OC2Config+0xdc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d11f      	bne.n	8001edc <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	019b      	lsls	r3, r3, #6
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	019b      	lsls	r3, r3, #6
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4619      	mov	r1, r3
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fe19 	bl	8001b26 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40010400 	.word	0x40010400

08001f0c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0303 	bic.w	r3, r3, #3
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	4313      	orrs	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <OC3Config+0xd8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d003      	beq.n	8001f7a <OC3Config+0x6e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <OC3Config+0xdc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d11f      	bne.n	8001fba <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	029b      	lsls	r3, r3, #10
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	029b      	lsls	r3, r3, #10
 8001f96:	4313      	orrs	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	015b      	lsls	r3, r3, #5
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fdb8 	bl	8001b42 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	40010400 	.word	0x40010400

08001fec <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800201a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	031b      	lsls	r3, r3, #12
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	031b      	lsls	r3, r3, #12
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a11      	ldr	r2, [pc, #68]	; (8002094 <OC4Config+0xa8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d003      	beq.n	800205c <OC4Config+0x70>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a10      	ldr	r2, [pc, #64]	; (8002098 <OC4Config+0xac>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d107      	bne.n	800206c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	019b      	lsls	r3, r3, #6
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4619      	mov	r1, r3
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff fd6d 	bl	8001b5e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40010000 	.word	0x40010000
 8002098:	40010400 	.word	0x40010400

0800209c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <LL_InitTick+0x30>)
 80020b0:	3b01      	subs	r3, #1
 80020b2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <LL_InitTick+0x30>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <LL_InitTick+0x30>)
 80020bc:	2205      	movs	r2, #5
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80020d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffdd 	bl	800209c <LL_InitTick>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <LL_mDelay+0x48>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80020fa:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002102:	d00c      	beq.n	800211e <LL_mDelay+0x32>
  {
    Delay++;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3301      	adds	r3, #1
 8002108:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800210a:	e008      	b.n	800211e <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <LL_mDelay+0x48>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <LL_mDelay+0x32>
    {
      Delay--;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f3      	bne.n	800210c <LL_mDelay+0x20>
    }
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <LL_SetSystemCoreClock+0x1c>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6013      	str	r3, [r2, #0]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000000 	.word	0x20000000

08002158 <__libc_init_array>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	4d0d      	ldr	r5, [pc, #52]	; (8002190 <__libc_init_array+0x38>)
 800215c:	4c0d      	ldr	r4, [pc, #52]	; (8002194 <__libc_init_array+0x3c>)
 800215e:	1b64      	subs	r4, r4, r5
 8002160:	10a4      	asrs	r4, r4, #2
 8002162:	2600      	movs	r6, #0
 8002164:	42a6      	cmp	r6, r4
 8002166:	d109      	bne.n	800217c <__libc_init_array+0x24>
 8002168:	4d0b      	ldr	r5, [pc, #44]	; (8002198 <__libc_init_array+0x40>)
 800216a:	4c0c      	ldr	r4, [pc, #48]	; (800219c <__libc_init_array+0x44>)
 800216c:	f000 f820 	bl	80021b0 <_init>
 8002170:	1b64      	subs	r4, r4, r5
 8002172:	10a4      	asrs	r4, r4, #2
 8002174:	2600      	movs	r6, #0
 8002176:	42a6      	cmp	r6, r4
 8002178:	d105      	bne.n	8002186 <__libc_init_array+0x2e>
 800217a:	bd70      	pop	{r4, r5, r6, pc}
 800217c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002180:	4798      	blx	r3
 8002182:	3601      	adds	r6, #1
 8002184:	e7ee      	b.n	8002164 <__libc_init_array+0xc>
 8002186:	f855 3b04 	ldr.w	r3, [r5], #4
 800218a:	4798      	blx	r3
 800218c:	3601      	adds	r6, #1
 800218e:	e7f2      	b.n	8002176 <__libc_init_array+0x1e>
 8002190:	080021e8 	.word	0x080021e8
 8002194:	080021e8 	.word	0x080021e8
 8002198:	080021e8 	.word	0x080021e8
 800219c:	080021ec 	.word	0x080021ec

080021a0 <memset>:
 80021a0:	4402      	add	r2, r0
 80021a2:	4603      	mov	r3, r0
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d100      	bne.n	80021aa <memset+0xa>
 80021a8:	4770      	bx	lr
 80021aa:	f803 1b01 	strb.w	r1, [r3], #1
 80021ae:	e7f9      	b.n	80021a4 <memset+0x4>

080021b0 <_init>:
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	bf00      	nop
 80021b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b6:	bc08      	pop	{r3}
 80021b8:	469e      	mov	lr, r3
 80021ba:	4770      	bx	lr

080021bc <_fini>:
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	bf00      	nop
 80021c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c2:	bc08      	pop	{r3}
 80021c4:	469e      	mov	lr, r3
 80021c6:	4770      	bx	lr
